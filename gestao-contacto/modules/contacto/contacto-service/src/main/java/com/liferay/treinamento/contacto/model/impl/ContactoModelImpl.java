/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.treinamento.contacto.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.treinamento.contacto.model.Contacto;
import com.liferay.treinamento.contacto.model.ContactoModel;
import com.liferay.treinamento.contacto.model.ContactoSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Contacto service. Represents a row in the &quot;Contacto_Contacto&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ContactoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactoImpl
 * @generated
 */
@JSON(strict = true)
public class ContactoModelImpl
	extends BaseModelImpl<Contacto> implements ContactoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacto model instance should use the <code>Contacto</code> interface instead.
	 */
	public static final String TABLE_NAME = "Contacto_Contacto";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"contactoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nome", Types.VARCHAR}, {"telefone", Types.VARCHAR},
		{"idade", Types.INTEGER}, {"email", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telefone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idade", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Contacto_Contacto (uuid_ VARCHAR(75) null,contactoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nome VARCHAR(75) null,telefone VARCHAR(75) null,idade INTEGER,email VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Contacto_Contacto";

	public static final String ORDER_BY_JPQL = " ORDER BY contacto.nome ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Contacto_Contacto.nome ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long NOME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Contacto toModel(ContactoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Contacto model = new ContactoImpl();

		model.setUuid(soapModel.getUuid());
		model.setContactoId(soapModel.getContactoId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNome(soapModel.getNome());
		model.setTelefone(soapModel.getTelefone());
		model.setIdade(soapModel.getIdade());
		model.setEmail(soapModel.getEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Contacto> toModels(ContactoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Contacto> models = new ArrayList<Contacto>(soapModels.length);

		for (ContactoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ContactoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Contacto.class;
	}

	@Override
	public String getModelClassName() {
		return Contacto.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Contacto, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Contacto, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contacto, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Contacto)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Contacto, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Contacto, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Contacto)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Contacto, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Contacto, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Contacto>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Contacto.class.getClassLoader(), Contacto.class,
			ModelWrapper.class);

		try {
			Constructor<Contacto> constructor =
				(Constructor<Contacto>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Contacto, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Contacto, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Contacto, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Contacto, Object>>();
		Map<String, BiConsumer<Contacto, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Contacto, ?>>();

		attributeGetterFunctions.put("uuid", Contacto::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Contacto, String>)Contacto::setUuid);
		attributeGetterFunctions.put("contactoId", Contacto::getContactoId);
		attributeSetterBiConsumers.put(
			"contactoId", (BiConsumer<Contacto, Long>)Contacto::setContactoId);
		attributeGetterFunctions.put("groupId", Contacto::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Contacto, Long>)Contacto::setGroupId);
		attributeGetterFunctions.put("companyId", Contacto::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Contacto, Long>)Contacto::setCompanyId);
		attributeGetterFunctions.put("userId", Contacto::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Contacto, Long>)Contacto::setUserId);
		attributeGetterFunctions.put("userName", Contacto::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Contacto, String>)Contacto::setUserName);
		attributeGetterFunctions.put("createDate", Contacto::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Contacto, Date>)Contacto::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Contacto::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Contacto, Date>)Contacto::setModifiedDate);
		attributeGetterFunctions.put("nome", Contacto::getNome);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<Contacto, String>)Contacto::setNome);
		attributeGetterFunctions.put("telefone", Contacto::getTelefone);
		attributeSetterBiConsumers.put(
			"telefone", (BiConsumer<Contacto, String>)Contacto::setTelefone);
		attributeGetterFunctions.put("idade", Contacto::getIdade);
		attributeSetterBiConsumers.put(
			"idade", (BiConsumer<Contacto, Integer>)Contacto::setIdade);
		attributeGetterFunctions.put("email", Contacto::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Contacto, String>)Contacto::setEmail);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContactoId() {
		return _contactoId;
	}

	@Override
	public void setContactoId(long contactoId) {
		_contactoId = contactoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_columnBitmask = -1L;

		_nome = nome;
	}

	@JSON
	@Override
	public String getTelefone() {
		if (_telefone == null) {
			return "";
		}
		else {
			return _telefone;
		}
	}

	@Override
	public void setTelefone(String telefone) {
		_telefone = telefone;
	}

	@JSON
	@Override
	public int getIdade() {
		return _idade;
	}

	@Override
	public void setIdade(int idade) {
		_idade = idade;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Contacto.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Contacto.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Contacto toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Contacto>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactoImpl contactoImpl = new ContactoImpl();

		contactoImpl.setUuid(getUuid());
		contactoImpl.setContactoId(getContactoId());
		contactoImpl.setGroupId(getGroupId());
		contactoImpl.setCompanyId(getCompanyId());
		contactoImpl.setUserId(getUserId());
		contactoImpl.setUserName(getUserName());
		contactoImpl.setCreateDate(getCreateDate());
		contactoImpl.setModifiedDate(getModifiedDate());
		contactoImpl.setNome(getNome());
		contactoImpl.setTelefone(getTelefone());
		contactoImpl.setIdade(getIdade());
		contactoImpl.setEmail(getEmail());

		contactoImpl.resetOriginalValues();

		return contactoImpl;
	}

	@Override
	public int compareTo(Contacto contacto) {
		int value = 0;

		value = getNome().compareTo(contacto.getNome());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Contacto)) {
			return false;
		}

		Contacto contacto = (Contacto)object;

		long primaryKey = contacto.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		ContactoModelImpl contactoModelImpl = this;

		contactoModelImpl._originalUuid = contactoModelImpl._uuid;

		contactoModelImpl._originalGroupId = contactoModelImpl._groupId;

		contactoModelImpl._setOriginalGroupId = false;

		contactoModelImpl._originalCompanyId = contactoModelImpl._companyId;

		contactoModelImpl._setOriginalCompanyId = false;

		contactoModelImpl._setModifiedDate = false;

		contactoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Contacto> toCacheModel() {
		ContactoCacheModel contactoCacheModel = new ContactoCacheModel();

		contactoCacheModel.uuid = getUuid();

		String uuid = contactoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contactoCacheModel.uuid = null;
		}

		contactoCacheModel.contactoId = getContactoId();

		contactoCacheModel.groupId = getGroupId();

		contactoCacheModel.companyId = getCompanyId();

		contactoCacheModel.userId = getUserId();

		contactoCacheModel.userName = getUserName();

		String userName = contactoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactoCacheModel.createDate = createDate.getTime();
		}
		else {
			contactoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactoCacheModel.nome = getNome();

		String nome = contactoCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			contactoCacheModel.nome = null;
		}

		contactoCacheModel.telefone = getTelefone();

		String telefone = contactoCacheModel.telefone;

		if ((telefone != null) && (telefone.length() == 0)) {
			contactoCacheModel.telefone = null;
		}

		contactoCacheModel.idade = getIdade();

		contactoCacheModel.email = getEmail();

		String email = contactoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			contactoCacheModel.email = null;
		}

		return contactoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Contacto, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Contacto, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contacto, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Contacto)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Contacto, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Contacto, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contacto, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Contacto)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Contacto>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _contactoId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nome;
	private String _telefone;
	private int _idade;
	private String _email;
	private long _columnBitmask;
	private Contacto _escapedModel;

}